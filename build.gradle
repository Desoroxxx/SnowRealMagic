plugins {
    id("idea")
    id("maven-publish")
    id("net.minecraftforge.gradle") version "[6.0,6.2)"
    id("java-library")
    id("org.spongepowered.mixin") version "0.7-SNAPSHOT"
    id("me.shedaniel.unified-publishing") version "0.1.+"
}

version = "${minecraft_version}-Forge-${mod_version}"
group = "${mod_base_package}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD          Snapshot are built nightly.
    // stable     #                 Stables are built at the discretion of the MCP team.
    // official   MCVersion         Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVer  Javadocs and parameters layered on top of Mojmaps from the ParchmentMC team.
    //
    // You must be aware of the Mojang license when using the 'official' / 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mappings_channel, version: minecraft_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            //property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // These arguments allow for optional authentication with Mojang servers.
            // If you want to authenticate, put these properties in GRADLE_HOME/gradle.properties.
            // By default, this is C:\Users\<your username>\.gradle\gradle.properties on Windows or ~/.gradle/gradle.properties on Linux/MacOS.
            if (project.hasProperty('mc_uuid')) {
                // Your UUID, trimmed / without the dashes
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                // Your Minecraft in-game username, not email
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                // Your current access token. When it expires, you need to retrieve a new one and regenerate your run configurations.
                // You may be able to find it in your .minecraft folder in launcher_accounts.json or launcher_profiles.json.
                args '--accessToken', project.getProperty('mc_accessToken')
            }

            // Add mixin config to runtime
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            //property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Add mixin config to runtime
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            //property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Add mixin config to runtime
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    //maven {
    //    name = "jei"
    //    url = "https://dvs1.progwml6.com/files/maven"
    //}
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url = uri("https://maven.su5ed.dev/releases")
    }
    flatDir {
        dir 'libs'
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    // Sets up the mixin config; this gets added to run configurations and the manifest in the final jar
    config "${mod_id}.mixins.json"

    // Enables exporting mixin-changed classes to .mixin.out in the run folder
    debug.export = true
}

jarJar.enable()

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    
    //implementation fg.deobf("curse.maven:jei-238222:3944627")
    implementation fg.deobf("curse.maven:jade-324717:4961520")
    implementation fg.deobf("curse.maven:kiwi-303657:4688568")
    annotationProcessor "curse.maven:kiwi-303657:4688568"
    
    implementation fg.deobf("curse.maven:serene-seasons-291874:4761603")
    implementation fg.deobf("curse.maven:cloth-config-348521:4633444")
    implementation(fg.deobf("dev.su5ed.sinytra.fabric-api:fabric-api-base:0.4.31+ef105b4977"))
    jarJar("dev.su5ed.sinytra.fabric-api:fabric-api-base:[0.4.30,0.4.32)")
    implementation(fg.deobf("dev.su5ed.sinytra.fabric-api:fabric-renderer-api-v1:3.2.1+1d29b44577"))
    jarJar("dev.su5ed.sinytra.fabric-api:fabric-renderer-api-v1:[3.2.1,3.2.2)")
    implementation(fg.deobf("dev.su5ed.sinytra.fabric-api:fabric-renderer-indigo:1.5.2+b5b2da4177"))
    jarJar("dev.su5ed.sinytra.fabric-api:fabric-renderer-indigo:[1.5.1,1.5.3)")

    //implementation fg.deobf("curse.maven:terraforged-363820:3799083")

    // Examples using mod jars from ./libs
    //implementation fg.deobf("libs:Kiwi-1.18.2-forge:6.0.0")
    //annotationProcessor "libs:Kiwi-1.18.2-forge:6.0.0"
    //implementation fg.deobf("libs:Jade-1.17.1:3.1.6")
}

processResources {
    from ('src/main/java') {
        include '**/*.json'
    }
}

jar {
    archiveClassifier = "nodeps"
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": mod_version,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}

tasks.jarJar {
    archiveClassifier = ""
    exclude '/data/sereneseasons'
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

unifiedPublishing {
    project {
        displayName = "[Forge $project.supported_version] $project.mod_version"
        version = project.mod_version // Optional, Inferred from project by default
        changelog = file("CHANGELOG.md").exists() ? file("CHANGELOG.md").text : "" // Optional, in markdown format
        releaseType = project.release_type // Optional, use "release", "beta" or "alpha"
        gameVersions = ["1.20", "1.20.1"]
        gameLoaders = ["forge", "neoforge"]

        mainPublication tasks.jar // Declares the publicated jar

        if (System.getenv("CURSE_TOKEN") != null) {
            curseforge {
                token = System.getenv("CURSE_TOKEN")
                id = "308663"

                relations { // Optional, Inferred from the relations above by default
                    depends "kiwi"
                    optional "cloth-config"
                }
            }
        }

        if (System.getenv("MODRINTH_TOKEN") != null) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = "iJNje1E8"

                relations { // Optional, Inferred from the relations above by default
                    depends "kiwi"
                    optional "cloth-config"
                }
            }
        }
    }
}
